# Задание: Применение Принципа Открытости/Закрытости (Open/Closed Principle) в Разработке Простой Игры
# Задача: Разработать простую игру, где игрок может использовать различные типы оружия для борьбы с монстрами. Программа должна быть спроектирована таким образом, чтобы легко можно было добавлять новые типы оружия, не изменяя существующий код бойцов или механизм боя.
# Исходные данные:
# - Есть класс `Fighter`, представляющий бойца.
# - Есть класс `Monster`, представляющий монстра.
# - Игрок управляет бойцом и может выбирать для него одно из вооружений для боя.
# Шаг 1:Создайте абстрактный класс для оружия
# - Создайте абстрактный класс `Weapon`, который будет содержать абстрактный метод `attack()`.
# Шаг 2: Реализуйте конкретные типы оружия
# - Создайте несколько классов, унаследованных от `Weapon`, например, `Sword` и `Bow`. Каждый из этих классов реализует метод `attack()` своим уникальным способом.
# Шаг 3: Модифицируйте класс `Fighter`
# - Добавьте в класс `Fighter` поле, которое будет хранить объект класса `Weapon`.
# - Добавьте метод `changeWeapon()`, который позволяет изменить оружие бойца.
# Шаг 4: Реализация боя
# - Реализуйте простой механизм для демонстрации боя между бойцом и монстром, исходя из выбранного оружия.
# Требования к заданию:
# - Код должен быть написан на Python.
# - Программа должна демонстрировать применение принципа открытости/закрытости: новые типы оружия можно легко добавлять, не изменяя существующие классы бойцов и механизм боя.
# - Программа должна выводить результат боя в консоль.
# Пример результата:
# Боец выбирает меч.
# Боец наносит удар мечом.
# Монстр побежден!
# Боец выбирает лук.
# Боец наносит удар из лука.
# Монстр побежден!

from abc import ABC, abstractmethod
import random


class Fighter():
    def __init__(self):
        self.name = "Боец"
        self.weapon = None

    def change_weapon(self, weapon):
        self.weapon = weapon
        print(f"Боец выбирает {self.weapon.name}.")

    def attac(self):
        self.weapon.attac()

class Monstr():
    def __init__(self):
        self.name = "Монстр"
    def is_defeated(self):
        get_external_impact = random.randint(0, 100)
        return get_external_impact > 50

class Weapon(ABC):
   @abstractmethod
   def attac(self):
       pass

class Sword(Weapon):
    def __init__(self):
        self.name = "меч"
    def attac(self):
        print("Боец наносит удар мечом. ")

class Bow(Weapon):
    def __init__(self):
        self.name = "лук"
    def attac(self):
        print("Боец наносит удар из лука.")

fighter = Fighter()
sword = Sword()
bow = Bow()

monstr = Monstr()

fighter.change_weapon(sword)
fighter.attac()
if monstr.is_defeated():
    print("Монстр побежден.")
else:
    print("Монстр не побежден.")

fighter.change_weapon(bow)
fighter.attac()
if monstr.is_defeated():
    print("Монстр побежден.")
else:
    print("Монстр не побежден.")
